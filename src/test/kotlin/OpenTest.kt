import org.testng.Assert
import sh.ashley.commands.DefaultCommandDispatcher
import sh.ashley.commands.dsl.command
import sh.ashley.commands.reflected.ReflectedCommand
import java.lang.Exception
import java.util.*

/**
 * @author ashley
 * @since 2019-04-04 02:47
 */
fun main() {
    val dispatcher = DefaultCommandDispatcher("").apply {
        this.registerCommand(ReflectedCommand(Piss))
        this.registerCommand(dslCmd)
        this.registerCommand(ReflectedCommand(ValTestCmd))

        this.registerCommand(command("help", "h", "?") {
            handler {
                parameter<String>(short = 'n', isRequired = false)

                onExecute {
                    val param = parameters['n'] as String?
                    if(param == null) {
                        println("Commands (${commands.size}): ${commands.joinToString { it.aliases.first() }}")
                    } else {
                        val cmds = commands.filter { cmd -> cmd.aliases.any { it.equals(param, ignoreCase = true) } }
                        if(cmds.any()) {
                            cmds.forEach { cmd ->
                                println("$cmd:")
                                cmd.handlers.forEach { handler ->
                                    println("\t$handler: ${handler.parameters.joinToString {
                                        val x = "$it: ${it.type.simpleName}"
                                        if (it.required) "<$x>" else "[$x]"
                                    }}")
                                }
                            }
                        } else {
                            System.err.println("No commands matched that alias.")
                        }
                    }
                }
            }
        })
    }

    val scanner = Scanner(System.`in`)
    print("> ")
    var input = scanner.nextLine()

    do {
        try {
            dispatcher.execute(input)
        } catch (e: Exception) {
            System.err.println("An error occured: ${e::class.qualifiedName}: ${e.message}")
        }
        print("> ")
        input = scanner.nextLine()
    } while (null != input)
}